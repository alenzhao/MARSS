\SweaveOpts{keep.source=TRUE, prefix.string=./figures/CS5-, eps=FALSE}
\chapter{Case Study 5: Using state-space models to analyze noisy animal tracking data}
\label{chap:CStracks}
\chaptermark{Analyzing animal tracking data}

<<RUNFIRST, echo=F, include.source=F>>=
require(MARSS)
library(maps) 
options(width=60)
options(prompt=" ", continue=" ")
op <- par(no.readonly = TRUE)   
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{A simple random walk model of animal movement}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\index{MARSS model!multivariate example}\index{animal tracking}A simple random walk model of movement with drift but no correlation is 
\begin{gather}
x_{1,t} = x_{1,t-1} + u_1 + v_{1,t}, \;\; v_{1,t} \sim \N(0,\sigma^2_1)\\
x_{2,t} = x_{2,t-1} + u_2 + v_{2,t}, \;\; v_{2,t} \sim \N(0,\sigma^2_2)
\label{eq:movement}
\end{gather}
where $x_{1,t}$ is the location at time $t$ along one axis (in our case study, longitude) and $x_{2,t}$ is for another, generally orthogonal, axis (in our case study, latitude).   We add errors to our observations of location:
\begin{gather}
y_{1,t} = x_{1,t} + a_1 + w_{1,t}, \;\; w_{1,t} \sim \N(0,\eta^2_1)\\
y_{2,t} = x_{2,t} + a_2 + w_{2,t}, \;\; w_{2,t} \sim \N(0,\eta^2_2),
\label{eq:observe}
\end{gather}

Together Equations \ref{eq:movement} and \ref{eq:observe} describe a MARSS model (now written in matrix form)\index{MARSS model}:
\begin{gather}
\xx_t = \xx_{t-1} + \uu + \vv_t, \;\; \vv_t \sim \MVN(0,\QQ) \\
\yy_t = \xx_{t} + \aa + \ww_t, \;\; \ww_t \sim \MVN(0,\RR). 
\label{eq:mssm}
\end{gather}

\section{The problem}
Loggerhead sea turtles (\emph{Caretta caretta}) are listed as threatened under the United States Endangered Species Act of 1973.  Over the last ten years, a number of state and local agencies have been deploying ARGOS tags on loggerhead turtles on the east coast of the United States.  We have data on eight individuals over that period.  In this case study, we use some turtle data from the WhaleNet Archive of
STOP Data, however we have corrupted this data severely by adding random errors in order to create a ``Bad Tag'' problem.  We corrupted latitude and longitude data by errors (Figure \ref{fig:fig1}) and it would appear that our sea turtles are becoming land turtles (at least part of the time).  

For this case study, we will use the \texttt{MARSS()} function to estimate true positions and speeds from the corrupted data.  We will use a mapping package to plot the results: the  \texttt{maps} package.
If you have not already, install this package by selecting the `Packages' menu and then `Install packages' and then select \texttt{maps}.  If you are on a Mac, remember to select ``binaries'' for the package type.  Type \texttt{show.doc(MARSS, Case\_study\_5.R)} to open a file in \R with all \R code to get you started on the analyses in this chapter.

%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
\begin{figure}[htp]
\begin{center}
<<badtagfig,fig=T,echo=F>>=
# Read in our noisy data (no missing values)
dat = loggerheadNoisy
turtlename="BigMama"
par(mai = c(0,0,0,0),mfrow=c(1,1))
map('state', region = c('florida', 'georgia', 'south carolina', 'north carolina', 'virginia', 'delaware','new jersey','maryland'),xlim=c(-85,-70))
points(dat$lon[which(dat$turtle==turtlename)], dat$lat[which(dat$turtle==turtlename)], col="blue",pch=21, cex=0.7)
@
\end{center}
\caption{Plot of the tag data from the turtle Big Mama.  Errors in the location data make it seem that Big Mama has been moving overland. }
\label{fig:fig1}
\end{figure}

\section{Estimate locations from bad tag data}

\subsection{Read in the data and load \texttt{maps} package}
Our noisy data are in \texttt{loggerheadNoisy}.  They consist of daily readings of location (longitude/latitude).
The data are recorded daily and \texttt{MARSS()} requires a data entry for each day.  If data are missing for a day, then the entries for latitude and longitude for that day should be -99.  However, to make this case study run quickly, we have interpolated all missing values in the original, uncorrupted, dataset (\texttt{loggerhead}).  The corrupted data are a dataframe and the first six lines look like so
<<data2>>=
loggerheadNoisy[1:6,]
@
The file has data for eight turtles:
<<turtles,echo=FALSE>>=
turtles = levels(loggerheadNoisy$turtle)
@
<<turtles2>>=
levels(loggerheadNoisy$turtle)
@
We will first analyze the position data for ``Big Mama''.  We put the data for ``Big Mama'' into variable \texttt{dat}.  \verb@dat@ is transposed because we need time across the columns.
<<data3, keep.source=TRUE>>=
turtlename="BigMama"
dat = loggerheadNoisy[which(loggerheadNoisy$turtle==turtlename),5:6]
dat = t(dat) #transpose
@

We will begin by specifying the structure of the MARSS model and then use \texttt{MARSS()} to fit that model to the data. There are two state processes (one for latitude and the other for longitude).  There is one observation time series for each state process.
<<label=setup>>=
Z.constraint=factor(c(1,2))
@

We will assume that the errors are independent and that there are different drift rates ($u$), process variances ($\sigma^2$) and observation variances for latitude and longitude ($\eta^2$).
<<setup2, keep.source=T>>=
U.constraint="unequal"
Q.constraint="diagonal and unequal"
R.constraint="diagonal and unequal"
@
Fit the model to the data:
<<fitmodel, results=hide>>=
kem = MARSS(dat, constraint=list(Z = Z.constraint, 
      Q = Q.constraint, R = R.constraint, U = U.constraint))
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Compare state estimates to the real positions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The real locations (from which \texttt{loggerheadNoisy} was produced by adding noise) are in  \texttt{loggerhead}. In Figure \ref{fig:kaltotrue}, we compare the tracks estimated from the noisy data with the original, good, data (see \texttt{Case\_Study\_5.R} for the code to make this plot.  There are only a few data points for the real data because in the real tag data, there are many missing days.  
%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{figure}[htp]
\begin{center}
<<figbigmama,fig=T,echo=F,width=6, height=6>>=
pred.lon = kem$states[1,]
pred.lat = kem$states[2,]

par(mai = c(0,0,0,0),mfrow=c(1,1))
library(maps)
map('state', region = c('florida', 'georgia', 'south carolina', 'north carolina', 'virginia', 'delaware','new jersey','maryland'),xlim=c(-85,-70))
points(loggerheadNoisy$lon[which(loggerheadNoisy$turtle==turtlename)], loggerheadNoisy$lat[which(loggerheadNoisy$turtle==turtlename)], col="blue",pch=21, cex=0.7)
lines(pred.lon, pred.lat,col="red", lwd=2)

goodturtles = loggerhead
gooddat = goodturtles[which(goodturtles$turtle==turtlename),5:6]
points(gooddat[,1], gooddat[,2],col="black", lwd=2, pch=3,cex=1.1)
legend("bottomright",c("bad locations", "estimated true location", "good location data"),pch=c(1,-1,3),lty=c(-1,1,-1),bty=F)
@
\end{center}
\caption{Plot of the estimated track of the turtle Big Mama versus the good location data (before we corrupted it with noise).}
\label{fig:kaltotrue}
\end{figure}
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

\subsection{Estimate speeds for each turtle}
Turtle biologists designated one of these loggerheads ``Big Mama,'' presumably for her size and speed.  For each of the eight turtles, estimate the average miles traveled per day.  To calculate the distance traveled by a turtle each day, you use the estimate (from \texttt{MARSS()}) of the lat/lon location of turtle at day $t$ and at day $t-1$.  To calculate distance traveled in miles from lat/lon start and finish locations, we will use the function \verb@GCDF@ defined at the beginning of the \emph{R} script, \texttt{Case\_Study\_5.R}):
<<GCDF,echo=FALSE>>=
GCDF <- function(lon1, lon2, lat1, lat2, degrees=TRUE, units="miles") {
   temp = ifelse(degrees==FALSE, acos(sin(lat1) *  sin(lat2) + cos(lat1) * cos(lat2) * cos(lon2 - lon1)), acos(sin(lat1/57.2958) * sin(lat2/57.2958) + cos(lat1/57.2958) * cos(lat2/57.2958) *  cos(lon2/57.2958 -lon1/57.2958)))
   r=3963.0 # (statute miles) , default
   if("units"=="nm") r=3437.74677 # (nautical miles)
   if("units"=="km") r=6378.7 # (kilometers)
   return (r * temp)
}
@
<<label=distance, eval=FALSE>>=
distance[i-1]=GCDF(pred.lon[i-1],pred.lon[i],
                   pred.lat[i-1],pred.lat[i])
@
\texttt{pred.lon} and \texttt{pred.lat} are the predicted longitudes and latitudes from \texttt{MARSS()}: rows one and two in \verb@kem$states@.  To calculate the distances for all days, we put this through a \texttt{for} loop:
<<label=distance2, keep.source=TRUE>>=
distance = array(-99, dim=c(dim(dat)[2]-1,1))
for(i in 2:dim(dat)[2])
   distance[i-1]=GCDF(pred.lon[i-1],pred.lon[i],
      pred.lat[i-1],pred.lat[i])
@

The command \texttt{mean(distance)} gives us the average distance per day.  We can also make a histogram of the distances traveled per day (Figure \ref{fig:disfig}).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{figure}[totalheight=0.8\textheight]
\begin{center}
<<disfig,fig=T,echo=F>>= 
par(mfrow=c(1,1))
hist(distance) #make a histogram of distance traveled per day
@
\end{center}
\caption{Histogram of the miles traveled per day for Big Mama. Compare this to the estimate of miles traveled per day if you had not accounted for measurement errors.  See the script file, \texttt{Case\_Study\_5.R}, for the code to this.}
\label{fig:disfig}
\end{figure}
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
\bigskip
\bigskip
Repeat the analysis done for ``Big Mama'' for each of the other turtles and fill out the speed table (Table \ref{tab:speeds}).  If you were given the opportunity to race these turtles, would you bet on Big Mama being the fastest?

%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
\begin{table}[htdp]
%\caption{default}
\begin{center}
\begin{tabular}{c|c}
Turtle 		& Estimated Speed\\
\hline
&\\
Big Mama		&\\
&\\
Bruiser		&\\
&\\
Humpty		&\\
&\\
Isabelle		&\\
&\\
Johanna		&\\
&\\
Mary Lee		&\\
&\\
TBA			&\\
&\\
Yoto			&\\
\end{tabular}
\end{center}
\label{tab:speeds}
\end{table}%
%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
 \bigskip
 

\section{Comparing turtle tracks to proposed fishing areas}
One of the greatest threats to the long term viability of loggerhead turtles is incidental take by net/pot fisheries.  Add two proposed fishing areas to your turtle plots:
\begin{Schunk}
\begin{Sinput}
# the proposed fishery areas
lines(c(-77,-78,-78,-77,-77),
      c(33.5,33.5,32.5,32.5,33.5),col="red",lwd=2)
lines(c(-75,-76,-76,-75,-75),
      c(38,38,37,37,38),col="red",lwd=2)
\end{Sinput}
\end{Schunk}
Given that only one area can be chosen as a future fishery, what do your predicted movement trajectories for our eight turtles tell you?

\section{Using \texttt{fields} to get density plots of locations}
If you are comfortable programming in \emph{R}, load the \texttt{fields} package.  Make 3D density plots of predicted sea turtle locations.  Which two areas appear to be most visited?

Include the confidence interval estimates for each location in this analysis.  For this part of the exercise, we will assume that the confidence intervals are roughly the same as the probability intervals (Bayesian).  We can assume that the error in latitude is independent from error in longitude.  The \texttt{fields} package includes a couple different functions.  One that might be useful here is \texttt{Tps()}, like in the example (\texttt{?fields}).  To call \texttt{fields}, we need predictor variables ($\xx$), which can be random lon/lat pairs randomly drawn within the range of the data.  The other requirement for \texttt{Tps()} is the response, $\yy$.  If we think of each predicted state being a bivariate normal density, the response for each of our random pairs can be the density across all of the predicted states.  There is code to help you get started in the \emph{R} file, \texttt{Case\_Study\_5.R}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\SweaveOpts{eval=FALSE}
\section{Using specialized packages to analyze tag data}
If you have real tag data to analyze, you should use a state-space modeling package that is customized for fitting MARSS models to tracking data. The MARSS package does not have all the bells and whistles that you would want for analyzing tracking data, particularly tracking data in the marine environment. These are a couple \R packages that we have come across for this purpose:
\begin{description}
\item[UKFSST] http://www.soest.hawaii.edu/tag-data/tracking/ukfsst/
\item[KFTRACK] http://www.soest.hawaii.edu/tag-data/tracking/kftrack/
\end{description}

\texttt{kftrack}\index{animal tracking!kftrack} is a full-featured toolbox for analyzing tag data with extended Kalman filtering.  It incorporates a number of extensions that are important for analyzing track data: barriers to movement such as coastlines and non-Gaussian movement distributions.  With \texttt{kftrack}, you can use the real tag data which has big gaps, i.e. days with no location.  \texttt{MARSS()} will struggle with these data because it will estimate states for all the unseen days; \texttt{kftrack} only fits to the seen days.  

To use \texttt{kftrack} to fit the turtle data, type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<kftrack, keep.source=TRUE, eval=FALSE>>=
library(kftrack) # must be installed from a local zip file
loggerhead = loggerhead
# Run kftrack with the first turtle (BigMama)
turtlename = "BigMama"
dat = loggerhead[which(loggerhead$turtle == turtlename),2:6]
model = kftrack(dat, fix.first=F, fix.last=F, 
       var.struct="uniform")   
@

<<Reset, echo=F>>=
options(prompt="> ", continue="+ ")
par(op)
@

<<label=Cs5_code, eval=TRUE, echo=FALSE, results=hide, fig=FALSE, keep.source=TRUE>>=
###############################################################
#    GCDF FUNCTION
#    This function converts units of degrees lat/lon to miles, 
#    nautical miles, or kilometers
###############################################################
GCDF <- function(lon1, lon2, lat1, lat2, degrees=TRUE, units="miles") {
   # This is the function for the Great Circle Distance Formula 
   # using decimal degrees or radians
   # Calculations at: http://www.nhc.noaa.gov/gccalc.shtml
   # This first component is only dependent on degrees or radians
   temp = ifelse(degrees==FALSE, acos(sin(lat1) *  
   sin(lat2) + cos(lat1) * cos(lat2) * cos(lon2 - lon1)), 
   acos(sin(lat1/57.2958) * sin(lat2/57.2958) + cos(lat1/57.2958) 
   * cos(lat2/57.2958) *  cos(lon2/57.2958 -lon1/57.2958)))
   r=3963.0 # (statute miles) , default
   if("units"=="nm") r=3437.74677 # (nautical miles)
   if("units"=="km") r=6378.7 # (kilometers)
   return (r * temp)
}

library(maps)    # must be installed from CRAN

# our noisy data (with no missing values)
turtles = levels(loggerheadNoisy$turtle)
levels(loggerheadNoisy$turtle)

##############SPECIFY THE TURTLE NAME HERE
turtlename="BigMama"

dat = loggerheadNoisy[which(loggerheadNoisy$turtle==turtlename),5:6]
dat = t(dat)

# Set up the MSSM model
# We are going to make a big approximation:
# We are going to pretend that 1 deg longitude 
# change is equal to about the same distance (miles)
# over the range of latitudes that the turtles are moving
# That's not true.  There is about a 10% difference across
# their range of latitude movement.
Q.constraint="diagonal and unequal"
R.constraint="diagonal and unequal"
U.constraint="unequal"
Z.constraint=factor(c(1,2)) #1 observation time series for each x time series

# Fit a random walk model for lon/lat to the lon/lat data
kem = MARSS(dat, constraint=list(Z = Z.constraint, 
   Q = Q.constraint, R = R.constraint, U = U.constraint))
pred.lon = kem$states[1,]
pred.lat = kem$states[2,]

##########################################
# Plot the results
##########################################
op = par(mai = c(0,0,0,0))
map('state', region = c('florida', 'georgia', 
   'south carolina', 'north carolina', 'virginia', 
   'delaware','new jersey','maryland'),xlim=c(-85,-65))
points(loggerheadNoisy$lon[which(loggerheadNoisy$turtle==turtlename)], 
   loggerheadNoisy$lat[which(loggerheadNoisy$turtle==turtlename)], 
   col="blue",pch=21, cex=0.7)
lines(pred.lon, pred.lat,col="red", lwd=2)

# add the good location data
goodturtles = loggerhead
gooddat = goodturtles[which(goodturtles$turtle==turtlename),5:6]
points(gooddat[,1], gooddat[,2],col="black", lwd=2)

# add the proposed fishery areas
lines(c(-77,-78,-78,-77,-77),c(33.5,33.5,32.5,32.5,33.5),
   col="red",lwd=2)
lines(c(-75,-76,-76,-75,-75),c(38,38,37,37,38),
   col="red",lwd=2)

###########################################
# Calculate the average miles traveled each day using
# the function GCDF defined above
# You must select and run the GCDF code first
###########################################
distance = array(-99, dim=c(dim(dat)[2]-1,1))
for(i in 2:dim(dat)[2])
   distance[i-1]=GCDF(pred.lon[i-1],pred.lon[i],
   pred.lat[i-1],pred.lat[i])

par(op) #reset plotting pars back to normal
par(mfrow=c(1,2))  #make a 2 panel graph
hist(distance) #make a histogram of distance traveled per day
print(paste("KalmanEM estimate of ave. mile per day for ",
  turtlename," = ", mean(distance) ))

# Compare to the distance traveled per day if you used the raw data
distance = array(-99, dim=c(dim(dat)[2]-1,1))
for(i in 2:dim(dat)[2])
   distance[i-1]=GCDF(dat[1,i-1],dat[1,i],dat[2,i-1],dat[2,i])
hist(distance) #make a histogram of distance traveled per day
mean(distance) 
print(paste("Raw estimate of ave. mile per day for ",
  turtlename," = ", mean(distance) ))
@


